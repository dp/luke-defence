// Generated by CoffeeScript 1.12.5
(function() {
  var Game;

  Game = {
    init: function() {
      this.renderer = PIXI.autoDetectRenderer(1024, 768);
      document.getElementById('gamebox').appendChild(this.renderer.view);
      this.stage = new PIXI.Container();
      this.renderer.render(this.stage);
      this.renderer.view.style.position = "absolute";
      this.renderer.view.style.display = "block";
      this.renderer.autoResize = true;
      return PIXI.loader.add("images/tileset.json").add("images/bg.png").load((function(_this) {
        return function() {
          return _this.setup();
        };
      })(this));
    },
    setup: function() {
      var ticker;
      console.log('Loaded');
      this.loadBg();
      this.showLevel();
      ticker = PIXI.ticker.shared;
      ticker.speed = 1;
      return ticker.add((function(_this) {
        return function(dTime) {
          return _this.update();
        };
      })(this));
    },
    loadBg: function() {
      var sprite, texture;
      texture = PIXI.utils.TextureCache["images/bg.png"];
      sprite = new PIXI.Sprite(texture);
      sprite.x = 0;
      sprite.y = 0;
      return this.stage.addChild(sprite);
    },
    showLevel: function() {
      var i, j, len, len1, level, point, ref, ref1, results;
      level = Levels.level1;
      console.log(level);
      ref = level.path;
      for (i = 0, len = ref.length; i < len; i++) {
        point = ref[i];
        this.showSprite('mushroom_1', point[0], point[1]);
      }
      ref1 = level.build_areas;
      results = [];
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        point = ref1[j];
        results.push(this.showSprite('mushroom_2', point[0], point[1]));
      }
      return results;
    },
    showSprite: function(image_name, x, y) {
      var sprite, texture;
      texture = PIXI.utils.TextureCache[image_name + ".png"];
      sprite = new PIXI.Sprite(texture);
      sprite.x = x;
      sprite.y = y;
      return this.stage.addChild(sprite);
    },
    update: function(dtime) {
      return this.render();
    },
    render: function() {
      return this.renderer.render(this.stage);
    },
    stop: function() {
      return PIXI.ticker.shared.stop();
    },
    start: function() {
      return PIXI.ticker.shared.start();
    }
  };

  window.Game = Game;

}).call(this);
